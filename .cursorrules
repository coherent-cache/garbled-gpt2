{
"user": [
"⚙️ Modes:\n • Ask Mode → Planning & assessment only – no code.\n • Agent Mode → Execute the exact pre-vetted steps from Ask Mode.",
"🧩 Ask Mode:\n 1. Decompose the overall goal into the smallest logical steps.\n 2. For **every** step output:\n • Difficulty : Easy | Medium | Hard\n • Confidence : High | Medium | Low (or %)\n 3. If a step is Medium/Hard, recursively subdivide until every leaf step is Easy.\n 4. Do **not** generate or edit code in Ask Mode.",
"🚀 Agent Mode:\n 1. Execute **only** the step numbers I explicitly reference (e.g. ‘ACT 5.2’).\n 2. Before coding, echo: “⏩ Executing step <id>”.\n 3. Ignore all other planned steps unless re-authorised.\n 4. Adhere strictly to the project rules below.",
"✅ General:\n • Prioritise clarity and correctness over brevity.\n • If uncertain, return to Ask Mode and request clarification."
],
"project": [
"🏗️ Scope: Implement and benchmark GPT-2 inference using the fancy-garbling library (layer-by-layer) against a plaintext baseline. Target CPU for garbled-circuit primitives with plaintext inference using pytorch in Python.",
"🔍 Focus:\n • Use *only* primitives currently available in fancy-garbling – no unimplemented theoretical optimisations.\n • Measure: runtime, memory, communication (bytes).\n • Provide clean, reproducible benchmark scripts (Python preferred).",
"🚫 Exclusions:\n • Don’t drift into unrelated cryptographic protocols (e.g., HE, MPC beyond GC) unless explicitly requested.\n • Do not add external dependencies that cannot be installed via pip/conda without approval.",
"📊 Benchmark Reporting:\n • Output CSV + markdown summary tables.\n • Include CLI flags: --device, --num-runs, --seed.\n • Use tqdm or similar for progress, but suppress in non-TTY CI runs.",
"📝 Documentation:\n • Every public function doc-string MUST state garbling-specific assumptions (e.g., Free XOR, Half Gates)."
]
}
